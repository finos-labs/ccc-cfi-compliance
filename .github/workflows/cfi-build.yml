name: CFI Build

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Generate matrix from config files
        id: set-matrix
        run: |
          TARGETS_DIR=config
          matrix='{"target": []}'

          for target_file in $TARGETS_DIR/*.json; do
            if [[ "$target_file" == *".json" ]]; then
              id=$(jq -r '.id' "$target_file")
              name=$(jq -r '.name' "$target_file")
              path=$(jq -r '.path' "$target_file")
              provider=$(jq -r '.provider' "$target_file")
              service=$(jq -r '.service' "$target_file")
              
              target_json=$(jq -c '.' "$target_file")
              matrix=$(echo "$matrix" | jq --argjson target "$target_json" '.target += [$target]')
            fi
          done

          echo "matrix={\"target\": $(echo "$matrix" | jq -c '.target')}" >> $GITHUB_OUTPUT
          echo "Generated matrix with $(echo "$matrix" | jq '.target | length') targets"

  deploy-and-scan:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        target: ${{ fromJson(needs.prepare-matrix.outputs.matrix).target }}
      fail-fast: false

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      OUTPUT_DIR: results
      TARGET_ID: ${{ matrix.target.id }}
      TARGET_NAME: ${{ matrix.target.name }}
      TARGET_PATH: ${{ matrix.target.path }}
      TARGET_PROVIDER: ${{ matrix.target.provider }}
      TARGET_SERVICE: ${{ matrix.target.service }}
      # Terraform variables
      TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_target_id: ${{ matrix.target.id }}
      TF_VAR_github_run_id: ${{ github.run_id }}
      TF_VAR_github_run_number: ${{ github.run_number }}
      TF_VAR_github_actor: ${{ github.actor }}
      TF_VAR_github_repository: ${{ github.repository }}
      TF_VAR_github_workflow: ${{ github.workflow }}
      TF_VAR_github_sha: ${{ github.sha }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        if: matrix.target.provider == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/TerraformRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure Azure Credentials (OIDC)
        if: matrix.target.provider == 'azure'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Authenticate to Google Cloud (OIDC)
        if: matrix.target.provider == 'gcp'
        uses: google-github-actions/auth@v1
        with:
          token_format: "id_token"
          id_token_audience: "https://iam.googleapis.com/projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/finos-oidc-pool/providers/github-provider"
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/finos-oidc-pool/providers/github-provider"
          service_account: "gha-deployer@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Steampipe
        run: |
          echo "📦 Installing Steampipe..."
          sudo /bin/sh -c "$(curl -fsSL https://steampipe.io/install/steampipe.sh)"
          steampipe --version
          
          echo "📦 Installing Steampipe plugins..."
          steampipe plugin install aws
          steampipe plugin install azure
          steampipe plugin install gcp
          
          echo "🚀 Starting Steampipe service..."
          steampipe service start
          
          echo "✅ Steampipe installed and configured successfully"

      - name: Cache Python Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
            prowler/.venv
          key: prowler-${{ hashFiles('prowler/poetry.lock') }}
          restore-keys: prowler-

      - name: Install Prowler and Python deps
        run: |
          git clone -b PRWLR-7257-map-ccc-objects-in-aws-provider --single-branch https://github.com/prowler-cloud/prowler
          cd prowler
          pipx install poetry
          poetry install

      - name: Run Prowler Scan (Baseline)
        id: prowler-scan-baseline
        continue-on-error: true
        run: |
          set -euo pipefail

          echo "🔍 Running Prowler baseline scan for $TARGET_ID..."
          cd "$GITHUB_WORKSPACE/prowler"
          mkdir -p output

          if [ "$TARGET_PROVIDER" = "aws" ]; then
            poetry run python prowler-cli.py aws --output-filename baseline
          elif [ "$TARGET_PROVIDER" = "azure" ]; then
            poetry run python prowler-cli.py azure --az-cli-auth --output-filename baseline
          elif [ "$TARGET_PROVIDER" = "gcp" ]; then
            poetry run python prowler-cli.py gcp --project-id ${{ secrets.GCP_PROJECT_ID }} --output-filename baseline
          fi

          echo "✅ Prowler baseline scan completed for $TARGET_ID"

      - name: Terraform Apply
        id: terraform-apply
        run: |
          set -euo pipefail

          echo "🚀 Deploying module: $TARGET_NAME (id: $TARGET_ID)"
          echo "📁 Path: $TARGET_PATH"
          echo "☁️  Provider: $TARGET_PROVIDER"
          echo "🔧 Service: $TARGET_SERVICE"

          cd "$GITHUB_WORKSPACE/$TARGET_PATH"
          
          if [ "$TARGET_PROVIDER" = "aws" ]; then
            terraform init
            terraform apply -auto-approve -input=false
          elif [ "$TARGET_PROVIDER" = "azure" ]; then
            export ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            terraform init -upgrade
            terraform apply -auto-approve -input=false
          elif [ "$TARGET_PROVIDER" = "gcp" ]; then
            export TF_VAR_project_id="${{ secrets.GCP_PROJECT_ID }}"
            terraform init
            terraform apply -auto-approve -input=false
          fi

          echo "✅ Terraform apply completed successfully for $TARGET_ID"

      - name: Run Prowler Scan (Complete)
        id: prowler-scan-complete
        if: success() && steps.terraform-apply.outcome == 'success'
        continue-on-error: true
        run: |
          set -euo pipefail

          echo "🔍 Running Prowler complete scan for $TARGET_ID..."
          cd "$GITHUB_WORKSPACE/prowler"

          if [ "$TARGET_PROVIDER" = "aws" ]; then
            poetry run python prowler-cli.py aws --output-filename complete
          elif [ "$TARGET_PROVIDER" = "azure" ]; then
            poetry run python prowler-cli.py azure --az-cli-auth --output-filename complete
          elif [ "$TARGET_PROVIDER" = "gcp" ]; then
            poetry run python prowler-cli.py gcp --project-id ${{ secrets.GCP_PROJECT_ID }} --output-filename complete
          fi

          echo "✅ Prowler complete scan completed successfully for $TARGET_ID"

      - name: Create Prowler Delta
        id: prowler-delta
        if: success() && steps.prowler-scan-baseline.outcome == 'success' && steps.prowler-scan-complete.outcome == 'success'
        continue-on-error: true
        run: |
          set -euo pipefail

          echo "📊 Creating Prowler delta (new findings) for $TARGET_ID..."
          cd "$GITHUB_WORKSPACE/prowler/output"

          # Find the baseline and complete OCSF files
          BASELINE_FILE=$(ls -t baseline*.ocsf.json 2>/dev/null | head -n 1)
          COMPLETE_FILE=$(ls -t complete*.ocsf.json 2>/dev/null | head -n 1)

          if [ -z "$BASELINE_FILE" ] || [ -z "$COMPLETE_FILE" ]; then
            echo "⚠️  Could not find baseline or complete OCSF files"
            exit 1
          fi

          echo "📄 Baseline file: $BASELINE_FILE"
          echo "📄 Complete file: $COMPLETE_FILE"

          # Extract UIDs from baseline findings
          echo "🔍 Extracting baseline finding UIDs..."
          jq -r '.[] | .finding_info.uid // empty' "$BASELINE_FILE" > baseline_uids.txt
          BASELINE_COUNT=$(wc -l < baseline_uids.txt | tr -d ' ')
          echo "Found $BASELINE_COUNT findings in baseline"

          # Create delta: findings in complete that are NOT in baseline
          echo "🔍 Creating delta (new findings)..."
          jq --slurpfile baseline_uids <(cat baseline_uids.txt | jq -R .) \
            '[.[] | select(.finding_info.uid as $uid | $baseline_uids | map(.) | index($uid) | not)]' \
            "$COMPLETE_FILE" > delta.ocsf.json

          DELTA_COUNT=$(jq 'length' delta.ocsf.json)
          echo "✅ Delta created with $DELTA_COUNT new findings"
          
          # Show summary
          echo ""
          echo "📊 Summary:"
          echo "  - Baseline findings: $BASELINE_COUNT"
          COMPLETE_COUNT=$(jq 'length' "$COMPLETE_FILE")
          echo "  - Complete findings: $COMPLETE_COUNT"
          echo "  - New findings (delta): $DELTA_COUNT"

      - name: Modify Prowler metadata
        id: modify-prowler-metadata
        if: success() && steps.prowler-scan-baseline.outcome == 'success' && steps.prowler-scan-complete.outcome == 'success'
        continue-on-error: true
        run: |
          set -euo pipefail

          echo "✏️  Modifying Prowler metadata for $TARGET_ID..."
          cd "$GITHUB_WORKSPACE/prowler/output"

          # Find the files
          BASELINE_FILE=$(ls -t baseline*.ocsf.json 2>/dev/null | head -n 1)
          COMPLETE_FILE=$(ls -t complete*.ocsf.json 2>/dev/null | head -n 1)

          # Modify baseline file
          if [ -n "$BASELINE_FILE" ] && [ -f "$BASELINE_FILE" ]; then
            echo "📝 Modifying baseline metadata..."
            jq 'map(.metadata.product.name = "Prowler (baseline)")' "$BASELINE_FILE" > baseline-modified.ocsf.json
            echo "✅ Created baseline-modified.ocsf.json"
          fi

          # Modify complete file
          if [ -n "$COMPLETE_FILE" ] && [ -f "$COMPLETE_FILE" ]; then
            echo "📝 Modifying complete metadata..."
            jq 'map(.metadata.product.name = "Prowler (complete)")' "$COMPLETE_FILE" > complete-modified.ocsf.json
            echo "✅ Created complete-modified.ocsf.json"
          fi

          # Modify delta file
          if [ -f "delta.ocsf.json" ]; then
            echo "📝 Modifying delta metadata..."
            jq 'map(.metadata.product.name = "Prowler (delta)")' delta.ocsf.json > delta-modified.ocsf.json
            echo "✅ Created delta-modified.ocsf.json"
          fi

          echo "✅ All Prowler metadata modifications completed"

      - name: Run Compliance Tests
        id: compliance-tests
        if: success() && steps.terraform-apply.outcome == 'success'
        continue-on-error: true
        run: |
          set -euo pipefail

          echo "🧪 Running compliance tests for $TARGET_ID..."
          cd "$GITHUB_WORKSPACE/testing"
          
          chmod +x run-compliance-tests.sh
          ./run-compliance-tests.sh --provider "$TARGET_PROVIDER" --output "output"

          echo "✅ Compliance tests completed for $TARGET_ID"

      - name: Copy OCSF Results
        if: always() && steps.terraform-apply.outcome == 'success'
        run: |
          # Create output directory
          mkdir -p ${{ env.OUTPUT_DIR }}
          
          # Copy Prowler OCSF results (modified versions with updated metadata)
          cd "$GITHUB_WORKSPACE/prowler/output"
          
          # Copy modified baseline
          if [ -f "baseline-modified.ocsf.json" ]; then
            cp "baseline-modified.ocsf.json" "../../${{ env.OUTPUT_DIR }}/${TARGET_ID}-baseline.ocsf.json"
            echo "✅ Successfully captured Prowler baseline output for $TARGET_ID"
          else
            echo "⚠️  No Prowler baseline-modified OCSF file found for $TARGET_ID"
          fi
          
          # Copy modified complete
          if [ -f "complete-modified.ocsf.json" ]; then
            cp "complete-modified.ocsf.json" "../../${{ env.OUTPUT_DIR }}/${TARGET_ID}-complete.ocsf.json"
            echo "✅ Successfully captured Prowler complete output for $TARGET_ID"
          else
            echo "⚠️  No Prowler complete-modified OCSF file found for $TARGET_ID"
          fi
          
          # Copy modified delta
          if [ -f "delta-modified.ocsf.json" ]; then
            cp "delta-modified.ocsf.json" "../../${{ env.OUTPUT_DIR }}/${TARGET_ID}-delta.ocsf.json"
            echo "✅ Successfully captured Prowler delta output for $TARGET_ID"
          else
            echo "⚠️  No Prowler delta-modified OCSF file found for $TARGET_ID"
          fi
          
          # Copy combined OCSF results from compliance tests
          cd "$GITHUB_WORKSPACE/testing"
          if [ -f "runner/output/combined.ocsf.json" ]; then
            cp "runner/output/combined.ocsf.json" "../${{ env.OUTPUT_DIR }}/${TARGET_ID}-combined.ocsf.json"
            echo "✅ Successfully captured combined OCSF output for $TARGET_ID"
          else
            echo "⚠️  No combined OCSF file found for $TARGET_ID"
          fi

      - name: Terraform Destroy
        if: always() && steps.terraform-apply.outcome == 'success'
        run: |
          echo "🧨 Running terraform destroy for $TARGET_ID..."
          cd "$GITHUB_WORKSPACE/$TARGET_PATH"

          if [ "$TARGET_PROVIDER" = "aws" ]; then
            terraform destroy -auto-approve -input=false || true
          elif [ "$TARGET_PROVIDER" = "azure" ]; then
            terraform destroy -auto-approve -input=false || true
          elif [ "$TARGET_PROVIDER" = "gcp" ]; then
            terraform destroy -auto-approve -input=false || true
          fi

          echo "✅ Terraform destroy completed for $TARGET_ID"

      - name: Upload module results
        uses: actions/upload-artifact@v4
        with:
          name: cfi-results-${{ matrix.target.id }}
          path: |
            ${{ env.OUTPUT_DIR }}
            config/${{ matrix.target.id }}.json

