name: CFI Build

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy-and-scan:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      OUTPUT_DIR: prowler-results
      PROWLER_ARGS: "aws -M json-ocsf -q"
      CONFIG_FILE: config/terraform_targets.json

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/TerraformRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
    
      - name: Cache Python Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
            prowler/.venv
            key: prowler-${{ hashFiles('prowler/poetry.lock') }}
            restore-keys: prowler-

      - name: Install Prowler and Python deps
        run: |
          git clone https://github.com/prowler-cloud/prowler
          cd prowler
          pipx install poetry
          poetry install
      - name: Read config and run modules
        run: |
          set -euo pipefail

          CONFIG_FILE=config/terraform_targets.json
          OUTPUT_DIR=prowler-results
          mkdir -p "$OUTPUT_DIR"

          count=$(jq '.targets | length' $CONFIG_FILE)
          echo "üîç Found $count Terraform modules in $CONFIG_FILE"

          for i in $(seq 0 $(($count - 1))); do
            id=$(jq -r ".targets[$i].id" $CONFIG_FILE)
            name=$(jq -r ".targets[$i].name" $CONFIG_FILE)
            path=$(jq -r ".targets[$i].path" $CONFIG_FILE)
            provider=$(jq -r ".targets[$i].provider" $CONFIG_FILE)
            service=$(jq -r ".targets[$i].service" $CONFIG_FILE)

            echo "üöÄ Deploying module: $name (id: $id)"

            (
                # Trap to ensure destroy always runs
                cleanup() {
                    echo "üß® Running final destroy for $id (even if script failed)..."
                    pushd "$path" > /dev/null
                    terraform destroy -auto-approve -var="region=$AWS_REGION" || true
                    popd > /dev/null
                }
                trap cleanup EXIT
            
                echo "üîß Applying module $id..."
                pushd "$path" > /dev/null
                terraform init
                terraform apply -auto-approve -var="region=$AWS_REGION"
                popd > /dev/null

                echo "üîç Running Prowler scan for $id..."
                pushd prowler > /dev/null
                eval "$(poetry env info --path)/bin/activate"
                poetry run python prowler-cli.py "$provider" --service "$service"

                echo "üì¶ Capturing latest OCSF output..."
                latest_file=$(ls -t output/*.ocsf.json | head -n 1)
                cp "$latest_file" "../$OUTPUT_DIR/${id}_ocsf.json"

                popd > /dev/null
            )
          done

          echo "üìù Copying metadata config to results"
          cp "$CONFIG_FILE" "$OUTPUT_DIR/modules.json"

      - name: Upload OCSF scan results
        uses: actions/upload-artifact@v4
        with:
          name: prowler-ocsf-results
          path: ${{ env.OUTPUT_DIR }}/ocsf.json
