name: CFI Build

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy-and-scan:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      OUTPUT_DIR: results
      PROWLER_ARGS: "aws -M json-ocsf -q"
      TARGETS_DIR: config

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/TerraformRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Configure Azure Credentials (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cache Python Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
            prowler/.venv
          key: prowler-${{ hashFiles('prowler/poetry.lock') }}
          restore-keys: prowler-

      - name: Install Prowler and Python deps
        run: |
          git clone https://github.com/prowler-cloud/prowler
          cd prowler
          pipx install poetry
          poetry install
      - name: Read config and run modules
        run: |
          set -euo pipefail

          TARGETS_DIR=config
          mkdir -p "$OUTPUT_DIR"

          # Find all target JSON files
          target_files=($TARGETS_DIR/*.json)
          count=${#target_files[@]}
          echo "🔍 Found $count Terraform target files in $TARGETS_DIR"

          # Create a combined modules.json for the results
          echo '{"targets": []}' > "$OUTPUT_DIR/modules.json"

          for target_file in "${target_files[@]}"; do
            # Skip if not a JSON file
            [[ "$target_file" == *".json" ]] || continue
            
            echo "📖 Reading target file: $target_file"
            
            id=$(jq -r '.id' "$target_file")
            name=$(jq -r '.name' "$target_file")
            path=$(jq -r '.path' "$target_file")
            provider=$(jq -r '.provider' "$target_file")
            service=$(jq -r '.service' "$target_file")

            echo "🚀 Deploying module: $name (id: $id)"

            # Add target to combined modules.json
            jq --argjson target "$(cat "$target_file")" '.targets += [$target]' "$OUTPUT_DIR/modules.json" > "$OUTPUT_DIR/modules.json.tmp"
            mv "$OUTPUT_DIR/modules.json.tmp" "$OUTPUT_DIR/modules.json"

            (
                # Trap to ensure destroy always runs
                cleanup() {
                    pwd
                    echo "🧨 Running final destroy for $id (even if script failed)..."
                    pushd "$path" > /dev/null
                    if [ "$provider" = "aws" ]; then
                      terraform destroy -auto-approve -var="region=$AWS_REGION" || true
                    elif [ "$provider" = "azure" ]; then
                      terraform destroy -auto-approve || true
                    elif [ "$provider" = "gcp" ]; then
                      terraform destroy -auto-approve || true
                    fi
                    popd > /dev/null
                }
                trap cleanup EXIT
            
                echo "🔧 Applying module $id..."
                pushd "$path" > /dev/null
                if [ "$provider" = "aws" ]; then
                  terraform init
                  terraform apply -auto-approve -var="region=$AWS_REGION"
                elif [ "$provider" = "azure" ]; then
                  terraform init
                  terraform apply -auto-approve
                elif [ "$provider" = "gcp" ]; then
                  terraform init
                  terraform apply -auto-approve 
                fi

                popd > /dev/null

                echo "🔍 Running Prowler scan for $id..."
                pushd prowler > /dev/null
                poetry run python prowler-cli.py "$provider" --service "$service" || echo "⚠️  Prowler exited with error but continuing"
                popd > /dev/null

                echo "📦 Capturing latest OCSF output..."
                latest_file=$(ls -t prowler/output/*.ocsf.json | head -n 1)
                cp "$latest_file" "$OUTPUT_DIR/${id}_ocsf.json"
            )
          done

          echo "📝 Combined metadata config saved to results/modules.json"

      - name: Upload OCSF scan results
        uses: actions/upload-artifact@v4
        with:
          name: cfi-results
          path: ${{ env.OUTPUT_DIR }}
